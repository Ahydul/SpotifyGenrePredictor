<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="viewRepresentation">
    <entry key="jsNamespace" type="xstring" value="knimeStreamgraph"/>
    <config key="jsCode">
        <entry key="array-size" type="xint" value="1"/>
        <entry key="0" type="xstring" value="/* global d3:false, kt:false, nv:false, moment:false */%%00010window.knimeStreamgraph = (function () {%%00010%%00010    var view = {};%%00010%%00010    var stackStyleByType = {%%00010        'Stacked-Area-Chart': 'stack',%%00010        'Percentage-Area-Chart': 'expand',%%00010        'Stream-Graph': 'stream-center'%%00010    };%%00010    var MIN_HEIGHT = 100;%%00010    var MIN_WIDTH = 100;%%00010    var currentFilter = null;%%00010    var TOOLTIP_WARNING = 'basisTooltip';%%00010%%00010    var _representation, _value, _data, _colorRange, layoutContainer,%%00010%%00010        chart, svg, knimeTable1, knimeTable2, xAxisType, xAxisData,%%00010%%00010        /**%%00010         * Function declarations%%00010         */%%00010        drawControls, setColors, setXAxisConf, transformData, drawChart, toggleFilter, setCssClasses,%%00010        createXAxisFormatter, updateTitles, updateAxisLabels, toggleGrid, toggleLegend, setTooltipCssClasses,%%00010        filterChanged;%%00010%%00010    view.init = function (representation, value) {%%00010        _representation = representation;%%00010        _value = value;%%00010        // Create Knime tables from data.%%00010        // Load data from port 1.%%00010        knimeTable1 = new kt();%%00010        knimeTable1.setDataTable(_representation.inObjects[0]);%%00010        // var columnKeys = _representation.options.columns;%%00010%%00010        // Load data from port 2.%%00010        knimeTable2 = null;%%00010        if (_representation.inObjects[1] !== null) {%%00010            knimeTable2 = new kt();%%00010            knimeTable2.setDataTable(_representation.inObjects[1]);%%00010        }%%00010%%00010        // Set locale for moment.js.%%00010        if (_representation.options.dateTimeFormats.globalDateTimeLocale !== 'en') {%%00010            moment.locale(_representation.options.dateTimeFormats.globalDateTimeLocale);%%00010        }%%00010%%00010        if (_representation.options.enableViewControls) {%%00010            drawControls();%%00010        }%%00010        setColors();%%00010        setXAxisConf();%%00010        transformData();%%00010        drawChart();%%00010        toggleFilter();%%00010    };%%00010%%00010    drawChart = function () {%%00010        // Remove earlier chart.%%00010        d3.select('#layoutContainer').remove();%%00010%%00010        /*%%00010         * Parse some options.%%00010         */%%00010        var stackStyle = stackStyleByType[_value.options.chartType];%%00010        var optFullscreen = _representation.options.svg.fullscreen &amp;&amp; _representation.runningInView;%%00010        var isTitle = _value.options.title !== '' || _value.options.subtitle !== '';%%00010%%00010        /*%%00010         * Create HTML for the view.%%00010         */%%00010        var body = d3.select('body');%%00010%%00010        // Determine available witdh and height.%%00010        var width, height;%%00010        if (optFullscreen) {%%00010            width = '100%';%%00010%%00010            if (isTitle || !_representation.options.enableViewControls) {%%00010                knimeService.floatingHeader(true);%%00010                height = '100%';%%00010            } else {%%00010                knimeService.floatingHeader(false);%%00010                height = 'calc(100% - ' + knimeService.headerHeight() + 'px)';%%00010            }%%00010%%00010        } else {%%00010            width = _representation.options.svg.width + 'px';%%00010            height = _representation.options.svg.height + 'px';%%00010        }%%00010%%00010        layoutContainer = body.append('div').attr('id', 'layoutContainer').attr('class', 'knime-layout-container')%%00010            .style({%%00010                width: width,%%00010                height: height,%%00010                'min-width': MIN_WIDTH + 'px',%%00010                'min-height': MIN_HEIGHT + 'px',%%00010                position: 'absolute'%%00010            });%%00010%%00010        // create div container to hold svg%%00010        var svgContainer = layoutContainer.append('div').attr('id', 'svgContainer')%%00010            .attr('class', 'knime-svg-container').style({%%00010                'min-width': MIN_WIDTH + 'px',%%00010                'min-height': MIN_HEIGHT + 'px',%%00010                width: '100%',%%00010                height: '100%'%%00010            });%%00010%%00010        // Create the SVG object%%00010        svg = svgContainer.append('svg').attr('id', 'svg');%%00010%%00010        if (optFullscreen) {%%00010            svg.attr('width', '100%');%%00010            svg.attr('height', '100%');%%00010        } else {%%00010            svg.attr('width', width);%%00010            svg.attr('height', height);%%00010        }%%00010%%00010        if (_value.options.interpolation === 'basis' &amp;&amp; _value.options.interactiveGuideline) {%%00010            knimeService.setWarningMessage(%%00010                'Displaying a tooltip is not supported when interpolation is set to &quot;basis&quot;.', TOOLTIP_WARNING);%%00010        } else {%%00010            knimeService.clearWarningMessage(TOOLTIP_WARNING);%%00010        }%%00010%%00010        // create the stacked area chart%%00010        nv.addGraph(function () {%%00010            chart = nv.models.stackedAreaChart().margin({%%00010                right: 50%%00010            }).x(function (d) {%%00010                return d[0];%%00010            }).y(function (d) {%%00010                return d[1];%%00010            }).color(_colorRange).interpolate(_value.options.interpolation).style(stackStyle).showControls(false)%%00010                .showLegend(true).useInteractiveGuideline(%%00010                    _value.options.interpolation === 'basis' ? false : _value.options.interactiveGuideline)%%00010                .interactive(false).duration(0);%%00010%%00010            chart.dispatch.on('renderEnd.css', setCssClasses);%%00010%%00010            var topMargin = 10;%%00010            topMargin += _value.options.title ? 10 : 0;%%00010            topMargin += _value.options.legend ? 0 : 30;%%00010            topMargin += _value.options.subtitle ? 8 : 0;%%00010            var bottomMargin = _value.options.title || _value.options.subtitle ? 25 : 30;%%00010            chart.legend.margin({%%00010                top: topMargin,%%00010                bottom: topMargin%%00010            });%%00010            chart.margin({%%00010                top: topMargin,%%00010                bottom: bottomMargin%%00010            });%%00010%%00010            chart.xAxis.tickFormat(createXAxisFormatter());%%00010%%00010            chart.yAxis.tickFormat(d3.format(_representation.options.yAxisFormatString));%%00010%%00010            updateTitles(false);%%00010            updateAxisLabels(false);%%00010%%00010            svg.datum(_data).call(chart);%%00010%%00010            nv.utils.windowResize(chart.update);%%00010%%00010            if ('disabled' in _value.options) {%%00010                var state = chart.defaultState();%%00010                state.disabled = _value.options.disabled;%%00010                chart.dispatch.changeState(state);%%00010            }%%00010%%00010            toggleGrid();%%00010            toggleLegend();%%00010%%00010            // tooltip is re-created every time therefore we need to assign classes accordingly%%00010            chart.interactiveLayer.dispatch.on('elementMousemove.tooltipCss', setTooltipCssClasses);%%00010%%00010            return chart;%%00010        });%%00010    };%%00010%%00010    toggleGrid = function () {%%00010        var opacity = _value.options.showGrid ? 1 : 0;%%00010        d3.selectAll('g.tick:not(.zero) &gt; line').style('opacity', opacity);%%00010    };%%00010%%00010    toggleLegend = function () {%%00010        var opacity = _value.options.legend ? 1 : 0;%%00010        d3.select('g.nv-legend').style('opacity', opacity);%%00010    };%%00010%%00010    setXAxisConf = function () {%%00010        // Set data and data type for the x-axis.%%00010        var xAxisColumn = _representation.options.xAxisColumn;%%00010        if (typeof xAxisColumn === 'undefined') {%%00010            // If undefined: The user selected RowId as x-Axis.%%00010            xAxisType = 'string';%%00010            xAxisData = [];%%00010%%00010            var rows = knimeTable1.getRows();%%00010            for (var i = 0; i &lt; rows.length; i++) {%%00010                xAxisData.push(rows[i].rowKey);%%00010            }%%00010%%00010        } else {%%00010            var columnIndex = knimeTable1.getColumnNames().indexOf(xAxisColumn);%%00010            xAxisType = knimeTable1.getColumnTypes()[columnIndex];%%00010            if (xAxisType === 'dateTime') {%%00010                // need to get which exactly date&amp;time type it is%%00010                xAxisType = knimeTable1.getKnimeColumnTypes()[columnIndex];%%00010            }%%00010            xAxisData = knimeTable1.getColumn(columnIndex);%%00010        }%%00010    };%%00010%%00010    // Transform the tabular format into a JSON format.%%00010    transformData = function () {%%00010        // Check which rows are included by the filter.%%00010        var includedRows = [];%%00010        for (var j = 0; j &lt; knimeTable1.getNumRows(); j++) {%%00010            if (!currentFilter || knimeTable1.isRowIncludedInFilter(j, currentFilter)) {%%00010%%00010                includedRows.push(j);%%00010            }%%00010        }%%00010%%00010        _data = [];%%00010        var columns = _representation.options.columns;%%00010        // Loop over all columns.%%00010        for (var i = 0; i &lt; columns.length; i++) {%%00010            var columnKey = columns[i];%%00010            var columnIndex = knimeTable1.getColumnNames().indexOf(columnKey);%%00010            var currentColumn = knimeTable1.getColumn(columnIndex);%%00010%%00010            _data.push({%%00010                key: columnKey,%%00010                values: includedRows.map(%%00010                // This loops over all rows that are included.%%00010                function (i) {%%00010                    var d = currentColumn[i];%%00010%%00010                    if (xAxisType === 'number') {%%00010                        // If data type of x-axis column can be interpreted as numeric,%%00010                        // use the data for the x-axis.%%00010                        return [xAxisData[i], d];%%00010                    } else {%%00010                        // If not, just use an integer index [0, n[.%%00010                        return [i, d];%%00010                    }%%00010                })%%00010            });%%00010        }%%00010    };%%00010%%00010    toggleFilter = function () {%%00010        if (_value.options.subscribeFilter) {%%00010            knimeService.subscribeToFilter(_representation.tableIds[0], filterChanged, knimeTable1.getFilterIds());%%00010        } else {%%00010            knimeService.unsubscribeFilter(_representation.tableIds[0], filterChanged);%%00010        }%%00010    };%%00010%%00010    filterChanged = function (filter) {%%00010        currentFilter = filter;%%00010        transformData();%%00010        svg.datum(_data);%%00010        chart.update();%%00010    };%%00010%%00010    // Set color scale: custom or default.%%00010    setColors = function () {%%00010        var colorScale = [];%%00010        var columns = _representation.options.columns;%%00010        if (knimeTable2 === null) {%%00010            colorScale = d3.scale.category10();%%00010            if (columns.length &gt; 10) {%%00010                colorScale = d3.scale.category20();%%00010            }%%00010            _colorRange = colorScale.range();%%00010        } else {%%00010            var rowColors = knimeTable2.getRowColors();%%00010            var numColumns = columns.length;%%00010            for (var i = 0; i &lt; numColumns; i++) {%%00010                var columnName = columns[i];%%00010                var rowIndex = knimeTable2.getColumn(0).indexOf(columnName);%%00010                var color = rowColors[rowIndex];%%00010%%00010                if (!color) {%%00010                    color = '#7C7C7C';%%00010                }%%00010                colorScale.push(color);%%00010            }%%00010            _colorRange = colorScale;%%00010        }%%00010    };%%00010    %%00010    // Return a function to format the x-axis-ticks.%%00010    createXAxisFormatter = function () {%%00010        /* eslint indent: [2, 4, {&quot;SwitchCase&quot;: 1}]*/%%00010        switch (xAxisType) {%%00010            case 'Date and Time':%%00010                return function (i) {%%00010                    return moment(xAxisData[i]).utc().format(%%00010                        _representation.options.dateTimeFormats.globalDateTimeFormat);%%00010                };%%00010            case 'Local Date':%%00010                return function (i) {%%00010                    return moment(xAxisData[i]).format(_representation.options.dateTimeFormats.globalLocalDateFormat);%%00010                };%%00010            case 'Local Date Time':%%00010                return function (i) {%%00010                    return moment(xAxisData[i]).format(%%00010                        _representation.options.dateTimeFormats.globalLocalDateTimeFormat);%%00010                };%%00010            case 'Local Time':%%00010                return function (i) {%%00010                    return moment(xAxisData[i], 'hh:mm:ss.SSSSSSSSS').format(%%00010                        _representation.options.dateTimeFormats.globalLocalTimeFormat);%%00010                };%%00010            case 'Zoned Date Time':%%00010                return function (i) {%%00010                    var data = xAxisData[i];%%00010                    var regex = /(.*)\[(.*)\]$/;%%00010                    var match = regex.exec(data);%%00010                    var date, dateTimeOffset;%%00010                    %%00010                    if (match === null) {%%00010                        date = moment.tz(data, '');%%00010                    } else {%%00010                        dateTimeOffset = match[1];%%00010                        date = moment.tz(dateTimeOffset, _representation.options.dateTimeFormats.timezone);%%00010                    }%%00010%%00010                    return date.format(_representation.options.dateTimeFormats.globalZonedDateTimeFormat);%%00010                };%%00010            case 'string':%%00010                return function (i) {%%00010                    return xAxisData[i];%%00010                };%%00010            case 'number':%%00010                return d3.format(_representation.options.xAxisFormatString);%%00010            default:%%00010                return function (i) {%%00010                    return i;%%00010                };%%00010        }%%00010    };%%00010%%00010    updateTitles = function (updateChart) {%%00010        if (chart) {%%00010            var curTitle = d3.select('#title');%%00010            var curSubtitle = d3.select('#subtitle');%%00010            var chartNeedsUpdating = curTitle.empty() === Boolean(_value.options.title) ||%%00010                curSubtitle.empty() === Boolean(_value.options.subtitle);%%00010            if (_value.options.title) {%%00010                if (curTitle.empty()) {%%00010                    svg.append('text').attr('x', 20).attr('y', 30).attr('id', 'title').attr('class', 'knime-title')%%00010                        .text(_value.options.title);%%00010                } else {%%00010                    curTitle.text(_value.options.title);%%00010                }%%00010            } else {%%00010                curTitle.remove();%%00010            }%%00010            %%00010            if (_value.options.subtitle) {%%00010                if (curSubtitle.empty()) {%%00010                    svg.append('text').attr('x', 20).attr('y', _value.options.title ? 46 : 20).attr('id', 'subtitle')%%00010                        .attr('class', 'knime-subtitle').text(_value.options.subtitle);%%00010                } else {%%00010                    curSubtitle.text(_value.options.subtitle).attr('y', _value.options.title ? 46 : 20);%%00010                }%%00010            } else {%%00010                curSubtitle.remove();%%00010            }%%00010%%00010            if (updateChart &amp;&amp; chartNeedsUpdating) {%%00010                var topMargin = 10;%%00010                topMargin += _value.options.title ? 10 : 0;%%00010                topMargin += _value.options.legend ? 0 : 30;%%00010                topMargin += _value.options.subtitle ? 8 : 0;%%00010                var bottomMargin = 25;%%00010                bottomMargin += (_value.options.title || _value.options.subtitle) ? 0 : 5;%%00010                bottomMargin += _value.options.xAxisLabel ? 20 : 0;%%00010                chart.legend.margin({%%00010                    top: topMargin,%%00010                    bottom: topMargin%%00010                });%%00010                chart.margin({%%00010                    top: topMargin,%%00010                    bottom: bottomMargin%%00010                });%%00010%%00010                if (_representation.options.svg.fullscreen &amp;&amp; _representation.runningInView) {%%00010%%00010                    var isTitle = _value.options.title !== '' || _value.options.subtitle !== '';%%00010                    var height;%%00010                    %%00010                    if (isTitle || !_representation.options.enableViewControls) {%%00010                        knimeService.floatingHeader(true);%%00010                        height = '100%';%%00010                    } else {%%00010                        knimeService.floatingHeader(false);%%00010                        height = 'calc(100% - ' + knimeService.headerHeight() + 'px)';%%00010                    }%%00010%%00010                    layoutContainer.style('height', height)%%00010                    // two rows below force to invalidate the container which solves a weird problem with vertical%%00010                    // scroll bar in IE%%00010                    .style('display', 'none').style('display', 'block');%%00010                    // d3.select(&quot;#svgContainer&quot;).style(&quot;height&quot;, height);%%00010                }%%00010%%00010                chart.update();%%00010            }%%00010        }%%00010    };%%00010%%00010    updateAxisLabels = function (updateChart) {%%00010        if (chart) {%%00010            var curYAxisLabel = '';%%00010            var curXAxisLabel = '';%%00010            var curYAxisLabelElement = d3.select('.nv-y.nv-axis .nv-axislabel');%%00010            var curXAxisLabelElement = d3.select('.nv-x.nv-axis .nv-axislabel');%%00010            if (!curYAxisLabelElement.empty()) {%%00010                curYAxisLabel = curYAxisLabelElement.text();%%00010            }%%00010            if (!curXAxisLabelElement.empty()) {%%00010                curXAxisLabel = curXAxisLabelElement.text();%%00010            }%%00010            var chartNeedsUpdating = (curYAxisLabel !== _value.options.yAxisLabel) ||%%00010                (curXAxisLabel !== _value.options.xAxisLabel);%%00010%%00010            if (!chartNeedsUpdating) {%%00010                return;%%00010            }%%00010%%00010            chart.xAxis.axisLabel(_value.options.xAxisLabel).axisLabelDistance(0);%%00010%%00010            chart.yAxis.axisLabel(_value.options.yAxisLabel).axisLabelDistance(0);%%00010%%00010            var bottomMargin = 25;%%00010            bottomMargin += _value.options.title || _value.options.subtitle ? 0 : 5;%%00010            bottomMargin += _value.options.xAxisLabel ? 20 : 0;%%00010%%00010            var leftMargin = 60;%%00010            leftMargin += _value.options.yAxisLabel ? 15 : 0;%%00010%%00010            chart.margin({%%00010                left: leftMargin,%%00010                bottom: bottomMargin%%00010            });%%00010%%00010            if (updateChart) {%%00010                chart.update();%%00010            }%%00010        }%%00010    };%%00010    %%00010    // eslint-disable-next-line complexity%%00010    drawControls = function () {%%00010        if (!knimeService) {%%00010            return;%%00010        }%%00010%%00010        if (_representation.options.displayFullscreenButton) {%%00010            knimeService.allowFullscreen();%%00010        }%%00010%%00010        if (!_representation.options.enableViewControls) {%%00010            return;%%00010        }%%00010%%00010        // Title / Subtitle Configuration%%00010        var titleEdit = _representation.options.enableTitleEdit;%%00010        var subtitleEdit = _representation.options.enableSubtitleEdit;%%00010        if (titleEdit) {%%00010            var chartTitleText = knimeService.createMenuTextField('chartTitleText', _value.options.title, function () {%%00010                if (_value.options.title !== this.value) {%%00010                    _value.options.title = this.value;%%00010                    updateTitles(true);%%00010                }%%00010            }, true);%%00010            knimeService.addMenuItem('Chart Title:', 'header', chartTitleText);%%00010        }%%00010        if (subtitleEdit) {%%00010            var chartSubtitleText = knimeService.createMenuTextField('chartSubtitleText', _value.options.subtitle,%%00010                function () {%%00010                    if (_value.options.subtitle !== this.value) {%%00010                        _value.options.subtitle = this.value;%%00010                        updateTitles(true);%%00010                    }%%00010                }, true);%%00010            knimeService.addMenuItem('Chart Subtitle:', 'header', chartSubtitleText, null, knimeService.SMALL_ICON);%%00010        }%%00010%%00010        // x-Axis &amp; y-Axis Labels%%00010        var xAxisEdit = _representation.options.enableXAxisEdit;%%00010        var yAxisEdit = _representation.options.enableYAxisEdit;%%00010        if (xAxisEdit || yAxisEdit) {%%00010            knimeService.addMenuDivider();%%00010%%00010            if (xAxisEdit) {%%00010                var xAxisText = knimeService.createMenuTextField('xAxisText', _value.options.xAxisLabel, function () {%%00010                    if (_value.options.xAxisLabel !== this.value) {%%00010                        _value.options.xAxisLabel = this.value;%%00010                        updateAxisLabels(true);%%00010                    }%%00010                }, true);%%00010                knimeService.addMenuItem('X-axis label:', 'ellipsis-h', xAxisText);%%00010            }%%00010            if (yAxisEdit) {%%00010                var yAxisText = knimeService.createMenuTextField('yAxisText', _value.options.yAxisLabel, function () {%%00010                    if (_value.options.yAxisLabel !== this.value) {%%00010                        _value.options.yAxisLabel = this.value;%%00010                        updateAxisLabels(true);%%00010                    }%%00010                }, true);%%00010                knimeService.addMenuItem('Y-axis label:', 'ellipsis-v', yAxisText);%%00010            }%%00010        }%%00010%%00010        // Chart Type / Interpolation Method / Custom Color%%00010        var chartTypeChange = _representation.options.enableChartTypeChange;%%00010        var interpolationEdit = _representation.options.enableInterpolationMethodEdit;%%00010        if (chartTypeChange || interpolationEdit) {%%00010            knimeService.addMenuDivider();%%00010%%00010            if (chartTypeChange) {%%00010                var chartTypes = Object.keys(stackStyleByType);%%00010                var chartTypeSelector = knimeService.createMenuSelect('chartTypeSelector', _value.options.chartType,%%00010                    chartTypes, function () {%%00010                        _value.options.chartType = this.options[this.selectedIndex].value;%%00010                        drawChart(); // needs a redraw to avoid tooltip problem (AP-7068)%%00010                    });%%00010                knimeService.addMenuItem('Chart Type:', 'area-chart', chartTypeSelector);%%00010            }%%00010%%00010            if (interpolationEdit) {%%00010                var interpolationMethods = ['basis', 'linear', 'step'];%%00010                var interpolationMethodSelector = knimeService.createMenuSelect('interpolationMethodSelector',%%00010                    _value.options.interpolation, interpolationMethods, function () {%%00010                        var changedToBasis = this.options[this.selectedIndex].value === 'basis' &amp;&amp;%%00010                            _value.options.interpolation !== 'basis';%%00010                        _value.options.interpolation = this.options[this.selectedIndex].value;%%00010                        if (changedToBasis &amp;&amp; _value.options.interactiveGuideline) {%%00010                            drawChart();%%00010                        } else {%%00010                            knimeService.clearWarningMessage(TOOLTIP_WARNING);%%00010                            chart.interpolate(_value.options.interpolation);%%00010                            chart.useInteractiveGuideline(_value.options.interpolation === 'basis' ? false%%00010                                : _value.options.interactiveGuideline);%%00010                            chart.update();%%00010                        }%%00010                    });%%00010                // CHECK: Should we use line-chart here?%%00010                knimeService.addMenuItem('Interpolation:', 'bar-chart', interpolationMethodSelector);%%00010            }%%00010        }%%00010%%00010        // Legend, Interactive Guideline, Grid%%00010        var legendToggle = _representation.options.enableLegendToggle;%%00010        var interactiveGuidelineToggle = _representation.options.enableInteractiveGuidelineToggle;%%00010        var showGridToggle = _representation.options.showGridToggle;%%00010        if (legendToggle || interactiveGuidelineToggle || showGridToggle) {%%00010            knimeService.addMenuDivider();%%00010%%00010            if (legendToggle) {%%00010                var legendCheckbox = knimeService.createMenuCheckbox('legendCheckbox', _value.options.legend,%%00010                    function () {%%00010                        _value.options.legend = this.checked;%%00010                        toggleLegend();%%00010                    });%%00010                knimeService.addMenuItem('Legend:', 'info-circle', legendCheckbox);%%00010            }%%00010%%00010            if (interactiveGuidelineToggle) {%%00010                var interactiveGuidelineCheckbox = knimeService.createMenuCheckbox('interactiveGuidelineCheckbox',%%00010                    _value.options.interactiveGuideline, function () {%%00010                        _value.options.interactiveGuideline = this.checked;%%00010                        drawChart();%%00010                    });%%00010%%00010                knimeService.addMenuItem('Tooltip:', 'comment', interactiveGuidelineCheckbox);%%00010            }%%00010%%00010            if (showGridToggle) {%%00010                var gridCheckbox = knimeService.createMenuCheckbox('gridCheckbox', _value.options.showGrid,%%00010                    function () {%%00010                        _value.options.showGrid = this.checked;%%00010                        toggleGrid();%%00010                    });%%00010                knimeService.addMenuItem('Show Grid:', 'th', gridCheckbox);%%00010            }%%00010        }%%00010%%00010        // Filter event checkbox.%%00010        if (knimeService.isInteractivityAvailable()) {%%00010            knimeService.addMenuDivider();%%00010            var subFilIcon = knimeService.createStackedIcon('filter', 'angle-double-right', 'faded right sm',%%00010                'left bold');%%00010%%00010            var subFilCheckbox = knimeService.createMenuCheckbox('filterCheckbox', _value.options.subscribeFilter,%%00010                function () {%%00010                    _value.options.subscribeFilter = this.checked;%%00010                    toggleFilter();%%00010                });%%00010            knimeService.addMenuItem('Subscribe to filter', subFilIcon, subFilCheckbox);%%00010        }%%00010    };%%00010%%00010    setCssClasses = function () {%%00010        // axis%%00010        var axis = d3.selectAll('.nv-axis').classed('knime-axis', true);%%00010        d3.selectAll('.nv-x').classed('knime-x', true);%%00010        d3.selectAll('.nv-y').classed('knime-y', true);%%00010        d3.selectAll('.nv-axislabel').classed('knime-axis-label', true);%%00010        axis.selectAll('path.domain').classed('knime-axis-line', true);%%00010        var axisMaxMin = d3.selectAll('.nv-axisMaxMin').classed('knime-axis-max-min', true);%%00010        axisMaxMin.selectAll('text').classed('knime-tick-label', true);%%00010        var tick = axis.selectAll('.knime-axis .tick').classed('knime-tick', true);%%00010        tick.selectAll('text').classed('knime-tick-label', true);%%00010        tick.selectAll('line').classed('knime-tick-line', true);%%00010%%00010        // legend%%00010        d3.selectAll('.nv-legendWrap').classed('knime-legend', true);%%00010        d3.selectAll('.nv-legend-symbol').classed('knime-legend-symbol', true);%%00010        d3.selectAll('.nv-legend-text').classed('knime-legend-label', true);%%00010    };%%00010%%00010    setTooltipCssClasses = function () {%%00010        // tooltip%%00010        var tooltip = d3.selectAll('.nvtooltip').classed('knime-tooltip', true);%%00010        tooltip.selectAll('.x-value').classed('knime-tooltip-caption', true).classed('knime-x', true);%%00010        tooltip.selectAll('.legend-color-guide').classed('knime-tooltip-color', true);%%00010        tooltip.selectAll('.key').classed('knime-tooltip-key', true);%%00010        tooltip.selectAll('.value').classed('knime-tooltip-value', true);%%00010    };%%00010%%00010    view.validate = function () {%%00010        return true;%%00010    };%%00010%%00010    view.getComponentValue = function () {%%00010        // Save disabled-state of the series from the chart if:%%00010        // - it was saved in _value before%%00010        // - some series are disabled%%00010%%00010        var container = d3.select('#svgContainer');%%00010        var disabled = container.selectAll('g .nv-series').data().map(function (o) {%%00010            return Boolean(o.disabled);%%00010        });%%00010%%00010        if ('disabled' in _value.options || disabled.some(Boolean)) {%%00010            _value.options.disabled = disabled;%%00010        }%%00010%%00010        return _value;%%00010    };%%00010%%00010    view.getSVG = function () {%%00010        // correct faulty rect elements%%00010        d3.selectAll('rect').each(function () {%%00010            var rect = d3.select(this);%%00010            if (!rect.attr('width')) {%%00010                rect.attr('width', 0);%%00010            }%%00010            if (!rect.attr('height')) {%%00010                rect.attr('height', 0);%%00010            }%%00010        });%%00010        var svgElement = d3.select('svg')[0][0];%%00010        knimeService.inlineSvgStyles(svgElement);%%00010        // Return the SVG as a string.%%00010        return (new XMLSerializer()).serializeToString(svgElement);%%00010    };%%00010%%00010    return view;%%00010%%00010})();%%00010"/>
    </config>
    <config key="cssCode">
        <entry key="array-size" type="xint" value="0"/>
    </config>
    <config key="jsDependencies">
        <entry key="numSettings" type="xint" value="4"/>
        <config key="dependency_0">
            <entry key="name" type="xstring" value="nvd3"/>
            <entry key="path" type="xstring" value="js-lib/nvd3/1.8.4/nv.d3.min.js"/>
            <entry key="usesDefine" type="xboolean" value="false"/>
            <entry key="exports" type="xstring" value="nv"/>
            <config key="dependencies">
                <entry key="array-size" type="xint" value="1"/>
                <entry key="0" type="xstring" value="D3_3.5.5"/>
            </config>
            <entry key="local" type="xboolean" value="true"/>
        </config>
        <config key="dependency_1">
            <entry key="name" type="xstring" value="D3_3.5.5"/>
            <entry key="path" type="xstring" value="js-lib/d3/d3.v3_5_5.min.js"/>
            <entry key="usesDefine" type="xboolean" value="false"/>
            <entry key="exports" type="xstring" isnull="true" value=""/>
            <config key="dependencies">
                <entry key="array-size" type="xint" value="0"/>
            </config>
            <entry key="local" type="xboolean" value="true"/>
        </config>
        <config key="dependency_2">
            <entry key="name" type="xstring" value="moment"/>
            <entry key="path" type="xstring" value="js-lib/moment/2_17/timezone/moment-timezone-with-data.min.js"/>
            <entry key="usesDefine" type="xboolean" value="false"/>
            <entry key="exports" type="xstring" value="moment"/>
            <config key="dependencies">
                <entry key="array-size" type="xint" value="1"/>
                <entry key="0" type="xstring" value="moment_locales_2_17"/>
            </config>
            <entry key="local" type="xboolean" value="true"/>
        </config>
        <config key="dependency_3">
            <entry key="name" type="xstring" value="moment_locales_2_17"/>
            <entry key="path" type="xstring" value="js-lib/moment/2_17/locales/moment-with-locales.min.js"/>
            <entry key="usesDefine" type="xboolean" value="false"/>
            <entry key="exports" type="xstring" isnull="true" value=""/>
            <config key="dependencies">
                <entry key="array-size" type="xint" value="0"/>
            </config>
            <entry key="local" type="xboolean" value="true"/>
        </config>
    </config>
    <config key="cssDependencies">
        <entry key="array-size" type="xint" value="1"/>
        <entry key="0" type="xstring" value="js-lib/nvd3/1.8.4/nv.d3.min.css"/>
    </config>
    <entry key="new" type="xboolean" value="false"/>
    <entry key="inView" type="xboolean" value="true"/>
    <config key="tableIds">
        <entry key="array-size" type="xint" value="2"/>
        <entry key="0" type="xstring" value="5d908aa7-34f6-4f47-ad39-43e72146e568"/>
        <entry key="1" type="xstring" isnull="true" value=""/>
    </config>
    <config key="variables">
        <entry key="numSettings" type="xint" value="2"/>
        <entry key="mapClass" type="xstring" value="string"/>
        <entry key="key_0" type="xstring" value="knime.workspace"/>
        <entry key="class_0" type="xstring" value="java.lang.String"/>
        <entry key="value_0" type="xstring" value="C:\Users\Ahydul\Documents\Programacion\Knime"/>
        <entry key="key_1" type="xstring" value="acoustic"/>
        <entry key="class_1" type="xstring" value="java.lang.String"/>
        <entry key="value_1" type="xstring" value="^(pop|chill|rock-n-roll|hip-hop|country|r-n-b|folk|heavy-metal|edm|soul|funk|disco|punk-rock|classical|indie-pop|ambient|psych-rock|electro|techno|progressive-house|piano|hard-rock|jazz|blues)$"/>
    </config>
    <config key="binaryFiles">
        <entry key="numSettings" type="xint" value="0"/>
        <entry key="mapClass" type="xstring" value="string"/>
    </config>
    <config key="options">
        <entry key="numSettings" type="xint" value="18"/>
        <entry key="mapClass" type="xstring" value="object"/>
        <entry key="key_0" type="xstring" value="displayFullscreenButton"/>
        <entry key="class_0" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_0" type="xboolean" value="true"/>
        <entry key="key_1" type="xstring" value="xAxisSort"/>
        <entry key="class_1" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_1" type="xboolean" value="true"/>
        <entry key="key_2" type="xstring" value="svg"/>
        <entry key="class_2" type="xstring" value="org.knime.dynamic.js.SettingsModelSVGOptions$JSONSVGOptions"/>
        <config key="value_2">
            <entry key="width" type="xint" value="1000"/>
            <entry key="height" type="xint" value="800"/>
            <entry key="fullscreen" type="xboolean" value="true"/>
        </config>
        <entry key="key_3" type="xstring" value="columns"/>
        <entry key="class_3" type="xstring" value="[Ljava.lang.String;"/>
        <config key="value_3">
            <entry key="array-size" type="xint" value="13"/>
            <entry key="0" type="xstring" value="danceability"/>
            <entry key="1" type="xstring" value="energy"/>
            <entry key="2" type="xstring" value="loudness"/>
            <entry key="3" type="xstring" value="speechiness"/>
            <entry key="4" type="xstring" value="acousticness"/>
            <entry key="5" type="xstring" value="instrumentalness"/>
            <entry key="6" type="xstring" value="liveness"/>
            <entry key="7" type="xstring" value="valence"/>
            <entry key="8" type="xstring" value="tempo"/>
            <entry key="9" type="xstring" value="duration_ms"/>
            <entry key="10" type="xstring" value="key"/>
            <entry key="11" type="xstring" value="mode"/>
            <entry key="12" type="xstring" value="time_signature"/>
        </config>
        <entry key="key_4" type="xstring" value="enableTitleEdit"/>
        <entry key="class_4" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_4" type="xboolean" value="true"/>
        <entry key="key_5" type="xstring" value="xAxisFormatString"/>
        <entry key="class_5" type="xstring" value="java.lang.String"/>
        <entry key="value_5" type="xstring" value=",.2f"/>
        <entry key="key_6" type="xstring" value="enableLegendToggle"/>
        <entry key="class_6" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_6" type="xboolean" value="true"/>
        <entry key="key_7" type="xstring" value="dateTimeFormats"/>
        <entry key="class_7" type="xstring" value="org.knime.js.core.components.datetime.SettingsModelDateTimeOptions$JSONDateTimeOptions"/>
        <config key="value_7">
            <entry key="globalDateTimeLocale" type="xstring" value="en"/>
            <entry key="globalDateFormat" type="xstring" value="YYYY-MM-DD"/>
            <entry key="globalLocalDateFormat" type="xstring" value="YYYY-MM-DD"/>
            <entry key="globalLocalDateTimeFormat" type="xstring" value="YYYY-MM-DD"/>
            <entry key="globalLocalTimeFormat" type="xstring" value="HH:mm:ss"/>
            <entry key="globalZonedDateTimeFormat" type="xstring" value="YYYY-MM-DD z"/>
            <entry key="timezone" type="xstring" value="Europe/Madrid"/>
        </config>
        <entry key="key_8" type="xstring" value="enableInterpolationMethodEdit"/>
        <entry key="class_8" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_8" type="xboolean" value="true"/>
        <entry key="key_9" type="xstring" value="showGridToggle"/>
        <entry key="class_9" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_9" type="xboolean" value="true"/>
        <entry key="key_10" type="xstring" value="enableChartTypeChange"/>
        <entry key="class_10" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_10" type="xboolean" value="true"/>
        <entry key="key_11" type="xstring" value="enableInteractiveGuidelineToggle"/>
        <entry key="class_11" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_11" type="xboolean" value="true"/>
        <entry key="key_12" type="xstring" value="xAxisColumn"/>
        <entry key="class_12" type="xstring" value="java.lang.String"/>
        <entry key="value_12" type="xstring" value="track_genre"/>
        <entry key="key_13" type="xstring" value="yAxisFormatString"/>
        <entry key="class_13" type="xstring" value="java.lang.String"/>
        <entry key="value_13" type="xstring" value=",.2f"/>
        <entry key="key_14" type="xstring" value="enableXAxisEdit"/>
        <entry key="class_14" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_14" type="xboolean" value="true"/>
        <entry key="key_15" type="xstring" value="enableViewControls"/>
        <entry key="class_15" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_15" type="xboolean" value="true"/>
        <entry key="key_16" type="xstring" value="enableSubtitleEdit"/>
        <entry key="class_16" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_16" type="xboolean" value="true"/>
        <entry key="key_17" type="xstring" value="enableYAxisEdit"/>
        <entry key="class_17" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_17" type="xboolean" value="true"/>
    </config>
    <config key="inObjects">
        <entry key="numSettings" type="xint" value="2"/>
        <config key="inObject_0">
            <entry key="knimeDataTableJSON" type="xstring" value="{&quot;@class&quot;:&quot;org.knime.js.core.JSONDataTable&quot;,&quot;fragment&quot;:false,&quot;rows&quot;:[{&quot;data&quot;:[&quot;ambient&quot;,0.02853681389254684,0.04437926535817766,0.03070799300506009,0.0010218141658854879,0.09155504026129765,0.13482300422543658,0.00976342854735978,0.020860956706241652,0.017364151178117772,0.0014175871062333644,0.09719850856669991,0.2359273100756067,0.023573713994555198],&quot;rowKey&quot;:&quot;Row0&quot;},{&quot;data&quot;:[&quot;blues&quot;,0.02298171451155252,0.0492688322339861,0.005891593839099477,0.004091545773291304,0.10444507766614507,0.01604949134327336,0.020125486484949134,0.060208895035918204,0.016159731077150415,6.068024233098424E-4,0.10356248102802157,0.2038409113147481,0.005094515226885095],&quot;rowKey&quot;:&quot;Row1&quot;},{&quot;data&quot;:[&quot;chill&quot;,0.01770879092684627,0.03307842896513509,0.008211280310617774,0.01309238730355335,0.09401856289425568,0.1049143271269212,0.014464174415773186,0.04777475689965726,0.014142320458478878,2.632925194650579E-4,0.10711003413517822,0.23600038990815964,0.004526791352518268],&quot;rowKey&quot;:&quot;Row2&quot;},{&quot;data&quot;:[&quot;classical&quot;,0.022398448374576753,0.032885099036846686,0.026810996736521313,0.0026603133448801952,0.019667525085907498,0.15996876527885645,0.01746857778432294,0.06929964181572223,0.015889129597041866,0.006365821492314127,0.09699546707277287,0.18135590059960952,0.021173700291141895],&quot;rowKey&quot;:&quot;Row3&quot;},{&quot;data&quot;:[&quot;country&quot;,0.01597157506627524,0.045388515752632363,0.004310575416790983,9.292714569087905E-4,0.08415666203906337,0.00103234612481113,0.021513825213485643,0.05137689139033573,0.01728736675375474,1.745364243545291E-4,0.10197917414907703,0.09546740942089785,0.004876584225423367],&quot;rowKey&quot;:&quot;Row4&quot;},{&quot;data&quot;:[&quot;disco&quot;,0.01631712110136744,0.036087136047461936,0.005659736019019276,0.0027316254901089275,0.03978297125839659,0.03379069443588726,0.02604479140607886,0.06180775372053256,0.006533353934794908,0.0013910717127020938,0.10938545719851896,0.22939683071085817,0.002169400736527299],&quot;rowKey&quot;:&quot;Row5&quot;},{&quot;data&quot;:[&quot;edm&quot;,0.011724008621903214,0.015350822949380337,0.0018498555934946016,0.004003530827439267,0.02073253463515216,0.02316948698308717,0.0223741119763022,0.037749054654749425,0.008224261766533176,1.4868701462232548E-4,0.10647753920671821,0.24961014010005364,0.0013035251651807146],&quot;rowKey&quot;:&quot;Row6&quot;},{&quot;data&quot;:[&quot;electro&quot;,0.017931301343167495,0.031155469793385997,0.0028155752312978856,0.008041812755175312,0.07150062784294221,0.023598948493885014,0.016086920766633112,0.04205965503846769,0.014638348397616907,1.6007952859573458E-4,0.10204611990672394,0.23738085838362188,0.002551350741618665],&quot;rowKey&quot;:&quot;Row7&quot;},{&quot;data&quot;:[&quot;folk&quot;,0.017482859420391742,0.048331667455334563,0.005602822819737629,0.004887572908879161,0.09408182987129553,0.017527998183624893,0.02410025373446355,0.05526786937406774,0.01308471659891104,0.003367237108904904,0.10318931239912821,0.19051865692769382,0.017142857142848588],&quot;rowKey&quot;:&quot;Row8&quot;},{&quot;data&quot;:[&quot;funk&quot;,0.02472223884291492,0.024374204862547138,0.004273763055600287,0.029545858926621715,0.056313728086825436,0.003070222404045252,0.02542867494874296,0.04160964426696793,0.01262450865913613,5.851455298870977E-4,0.1064323921501263,0.24598568223828213,0.007279523149765515],&quot;rowKey&quot;:&quot;Row9&quot;},{&quot;data&quot;:[&quot;hard-rock&quot;,0.01872539234489883,0.02774513197626652,0.003655966840021603,0.0037019824828846974,0.019654464050517864,0.01706957725933033,0.03996412065647272,0.05377735594013773,0.014348770048681792,7.276963402744777E-4,0.10872589581072378,0.22859840787932392,0.0017875100603075866],&quot;rowKey&quot;:&quot;Row10&quot;},{&quot;data&quot;:[&quot;heavy-metal&quot;,0.013306566231323053,0.01728908737900374,0.0031810455560945636,0.00281485493747378,0.002865386416759409,0.04430269994907594,0.06098519328904355,0.030995871306444798,0.012779358462043958,6.429380066389593E-4,0.10457911289046527,0.24322968906720158,0.003067918615288998],&quot;rowKey&quot;:&quot;Row11&quot;},{&quot;data&quot;:[&quot;hip-hop&quot;,0.015078430565924448,0.020951617628466142,0.002024003029764485,0.012109860852449323,0.04028748252224899,0.0060633811612366886,0.023361522359744827,0.052792373881695595,0.015080405524655442,3.8039969401776124E-4,0.10620074315531557,0.2500204766975182,0.006196672324822635],&quot;rowKey&quot;:&quot;Row12&quot;},{&quot;data&quot;:[&quot;indie-pop&quot;,0.021033647656418946,0.036352703341676715,0.004795709028681283,0.004774694015907407,0.09519419768654198,0.014081259726944637,0.014900009793372438,0.04513549034812267,0.015625462229190486,3.5435219213092304E-4,0.11120373298863645,0.19722129783693845,0.006772933998871527],&quot;rowKey&quot;:&quot;Row13&quot;},{&quot;data&quot;:[&quot;jazz&quot;,0.024416345354844982,0.028671782256524798,0.00898935016883756,0.01088347479957401,0.04081835318371871,0.07350445337393456,0.02192732343068308,0.06837726654981793,0.015644223875614607,9.395918322629055E-4,0.09814253143488537,0.16837680440208427,0.016404915855371023],&quot;rowKey&quot;:&quot;Row14&quot;},{&quot;data&quot;:[&quot;piano&quot;,0.02008950965553007,0.0983542316128969,0.04811252508986074,0.0011423627559456156,0.15064952366514126,0.2125572191747813,0.017165679217544597,0.04683095710947786,0.021038620552869293,4.653115795089406E-4,0.10104716202235982,0.20387458269937522,0.012771447902132577],&quot;rowKey&quot;:&quot;Row15&quot;},{&quot;data&quot;:[&quot;pop&quot;,0.020476777539529967,0.03995874519408285,0.00325743493530181,0.005375667656885872,0.09163012153915691,0.0024898000564096867,0.011915963726764765,0.05112350941736374,0.01838882970960637,2.740182848128017E-4,0.08982299190404189,0.25060240963855424,0.022049119555132956],&quot;rowKey&quot;:&quot;Row16&quot;},{&quot;data&quot;:[&quot;progressive-house&quot;,0.012487517722588949,0.01262289990944193,0.0019469227682387508,0.004959786944306497,0.007719985837532723,0.10565741156669912,0.0300553120176496,0.04483924815256943,0.001957948763104742,4.8671532334137085E-4,0.10273101682929595,0.24990953326189683,0.0024265462785576734],&quot;rowKey&quot;:&quot;Row17&quot;},{&quot;data&quot;:[&quot;psych-rock&quot;,0.021640649251062828,0.04648994538146514,0.009243503859287398,0.001642422819540462,0.08406029938476445,0.04993502443758507,0.03853570566655016,0.07288364869038694,0.013225125710213498,0.0023781495776895507,0.10894458381976703,0.2338955264661318,0.006530117489237989],&quot;rowKey&quot;:&quot;Row18&quot;},{&quot;data&quot;:[&quot;punk-rock&quot;,0.016685492905763134,0.026225252703200516,0.004052428441547108,0.0021477966593128595,0.02470687365967693,0.016505410016084222,0.04429485124085447,0.045918440536739685,0.015722165137546196,3.835842895879979E-4,0.11292176722798722,0.20243228553310985,0.0030712926895361476],&quot;rowKey&quot;:&quot;Row19&quot;},{&quot;data&quot;:[&quot;r-n-b&quot;,0.01992059029256608,0.03146413157219262,0.0038344806134237718,0.017139136310126476,0.06470114154071609,5.76929631040166E-4,0.04312006392167271,0.06086246128815247,0.011512338668950522,4.3152240518254804E-4,0.10457964391522064,0.20475041067417615,0.01219048576886882],&quot;rowKey&quot;:&quot;Row20&quot;},{&quot;data&quot;:[&quot;rock-n-roll&quot;,0.019358979704121614,0.032568680404758174,0.005779406885386498,0.0014138046184029188,0.07225021526864339,0.006497286175783026,0.03197028016364258,0.04859595709172421,0.015318015709792108,2.170930758071805E-4,0.09623117573278217,0.144178056741724,0.005806908930841909],&quot;rowKey&quot;:&quot;Row21&quot;},{&quot;data&quot;:[&quot;soul&quot;,0.016932760718968008,0.03851072172910594,0.0038488724729450912,0.004375788418871735,0.0721369438859246,0.010754914248908707,0.037102478316888066,0.06706327532070397,0.01337382284089398,3.2272896723090034E-4,0.10269157633815426,0.20911023382933497,0.0041874683672283135],&quot;rowKey&quot;:&quot;Row22&quot;},{&quot;data&quot;:[&quot;techno&quot;,0.011794181160997097,0.025199494462787946,0.0034127798225180336,0.0028855701488309854,0.012960217066559124,0.1368599420727278,0.022428759823035754,0.06383421512335735,0.003132490823683444,0.0012870561439470235,0.10913030698764549,0.24753822984244672,0.002164735866527456],&quot;rowKey&quot;:&quot;Row23&quot;}],&quot;filtered&quot;:false,&quot;id&quot;:&quot;5d908aa7-34f6-4f47-ad39-43e72146e568&quot;,&quot;spec&quot;:{&quot;@class&quot;:&quot;org.knime.js.core.JSONDataTableSpec&quot;,&quot;numRows&quot;:24,&quot;possibleValues&quot;:[[&quot;ambient&quot;,&quot;blues&quot;,&quot;chill&quot;,&quot;classical&quot;,&quot;country&quot;,&quot;disco&quot;,&quot;edm&quot;,&quot;electro&quot;,&quot;folk&quot;,&quot;funk&quot;,&quot;hard-rock&quot;,&quot;heavy-metal&quot;,&quot;hip-hop&quot;,&quot;indie-pop&quot;,&quot;jazz&quot;,&quot;piano&quot;,&quot;pop&quot;,&quot;progressive-house&quot;,&quot;psych-rock&quot;,&quot;punk-rock&quot;,&quot;r-n-b&quot;,&quot;rock-n-roll&quot;,&quot;soul&quot;,&quot;techno&quot;],null,null,null,null,null,null,null,null,null,null,null,null,null],&quot;numColumns&quot;:14,&quot;numExtensions&quot;:0,&quot;colNames&quot;:[&quot;track_genre&quot;,&quot;danceability&quot;,&quot;energy&quot;,&quot;loudness&quot;,&quot;speechiness&quot;,&quot;acousticness&quot;,&quot;instrumentalness&quot;,&quot;liveness&quot;,&quot;valence&quot;,&quot;tempo&quot;,&quot;duration_ms&quot;,&quot;key&quot;,&quot;mode&quot;,&quot;time_signature&quot;],&quot;colTypes&quot;:[&quot;string&quot;,&quot;number&quot;,&quot;number&quot;,&quot;number&quot;,&quot;number&quot;,&quot;number&quot;,&quot;number&quot;,&quot;number&quot;,&quot;number&quot;,&quot;number&quot;,&quot;number&quot;,&quot;number&quot;,&quot;number&quot;,&quot;number&quot;],&quot;knimeTypes&quot;:[&quot;String&quot;,&quot;Number (double)&quot;,&quot;Number (double)&quot;,&quot;Number (double)&quot;,&quot;Number (double)&quot;,&quot;Number (double)&quot;,&quot;Number (double)&quot;,&quot;Number (double)&quot;,&quot;Number (double)&quot;,&quot;Number (double)&quot;,&quot;Number (double)&quot;,&quot;Number (double)&quot;,&quot;Number (double)&quot;,&quot;Number (double)&quot;],&quot;extensionTypes&quot;:[],&quot;extensionNames&quot;:[],&quot;rowSizeValues&quot;:null,&quot;maxValues&quot;:[&quot;techno&quot;,0.02853681389254684,0.0983542316128969,0.04811252508986074,0.029545858926621715,0.15064952366514126,0.2125572191747813,0.06098519328904355,0.07288364869038694,0.021038620552869293,0.006365821492314127,0.11292176722798722,0.25060240963855424,0.023573713994555198],&quot;minValues&quot;:[&quot;ambient&quot;,0.011724008621903214,0.01262289990944193,0.0018498555934946016,9.292714569087905E-4,0.002865386416759409,5.76929631040166E-4,0.00976342854735978,0.020860956706241652,0.001957948763104742,1.4868701462232548E-4,0.08982299190404189,0.09546740942089785,0.0013035251651807146],&quot;hiddenColumns&quot;:[],&quot;colorModels&quot;:[],&quot;rowColorValues&quot;:[&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;],&quot;containsMissingValues&quot;:[false,false,false,false,false,false,false,false,false,false,false,false,false,false],&quot;filterIds&quot;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null]},&quot;fragmentFirstRowIndex&quot;:0,&quot;totalFilteredRows&quot;:0,&quot;dataHash&quot;:null,&quot;totalRows&quot;:0}"/>
        </config>
        <config key="inObject_1">
            <entry key="jsonValue" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <entry key="warnMessage" type="xstring" value=""/>
    <entry key="errorMessage" type="xstring" value=""/>
</config>
